Opis Zadania:

Jeden ViewController z:
- dwoma przyciskami na dole ekranu: dodaj element i wyczyść listę
- na pozostałej części ekranu UICollectionView zawierające elementy listy

Źródło danych:
- dane do przykładu należy pobrać ze strony: https://jsonplaceholder.typicode.com
- endpoint do wykorzystania to `photos`

Pobieranie elementów:
- Wciskając przycisk `dodaj element` pobieramy kolejny element (zaczynając od pierwszego zdjęcia) i dodajemy je na listę
- miniaturki należy pobrać asynchronicznie i cacheować do poźniejszego wykorzystania.

Prezentacja danych na liście (UICollectionView):
Pojedynczy element kolekcji zawiera:
- tytuł
- miniaturkę pobraną z API
Pomiędzy elementami Collection View są separatory (osobne, jako decoration view).
Zawsze kiedy lista jest jest pusta należy wyświetlić tekst: "Brak miniaturek do wyświetlenia"

Czyszczenie listy:
- usuwa wszystkie elementy z UICollectionView
- resetuje pobieranie danych tak by ponownie zacząć ładować od pierwszego elementu z Endpointu.

Uwagi do zadania:
Oceniana będzie struktura projektu, obiektowe podejście do zagadnienia oraz znajomość iOSa. 
Dozwolone jest korzystanie z zewnętrznych bibliotek.
Mile widziane jest przetestowanie dowolnie wybranej klasy w projekcie.

Moje uzasadnienie wybranych rozwiązań:

- Nie korzystałem z bibliotek zewnętrznych, do wykonania zadania wystarczająco dobrze nadaje się standardowa biblioteka i Cocoa, a brak zależności w tak małym projekcie ma plusy

- Pobieram po kolei każde "zdjęcie", w przypadku gdy index pobieranego zdjęcia przekroczy 5000 (czyli liczbę obecnie dostępnych zdjęć na jsonplaceholde.typicode.com/photos), po prostu nie jest dodawany kolejny element. Myślałem nad pobraniem z góry całego jsona photos, ale ten sposób mniej pasował mi do "ideii" tego ViewControllera.

- Cacheowanie odbywa się przez bardzo prosty mechanizm NSCache, który wydaje mi się być w tym przypadku wystarczający

- Dla klasy TypicodePhotoItem zostały zrobione proste testy.
